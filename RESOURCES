https://el3um4s.medium.com/how-to-test-sveltekit-app-with-jest-848afa8edbc7
repo: https://github.com/el3um4s/memento-sveltekit-jest

if jest is running tests that are deleted, clear cache by changing in package.json:
"test": "jest --clearCache"

1.) install these packages: 
npm i -D jest @types/jest ts-jest @testing-library/jest-dom svelte-jester @testing-library/svelte

/// also these packages (from basar tutorials)
npm i -D @testing-library/user-event axios whatwg-fetch msw

2.) update packages if necessary:
npx npm-check-updates

3.) svelte.config.test.cjs:
const preprocess = require('svelte-preprocess');
module.exports = { preprocess: preprocess() };

4.) jest-setup.ts:
import '@testing-library/jest-dom';

5.) jest.config.cjs:
module.exports = {
  transform: {
    '^.+\\.svelte$': [
      'svelte-jester',
      { preprocess: './svelte.config.test.cjs' }
    ],
    '^.+\\.ts$': 'ts-jest',
    '^.+\\.js$': 'ts-jest'
  },
  moduleFileExtensions: ['js', 'ts', 'svelte'],
  moduleNameMapper: {
  '^\\$lib(.*)$': '<rootDir>/src/lib$1',
  '^\\$app(.*)$': [
    '<rootDir>/.svelte-kit/dev/runtime/app$1',
    '<rootDir>/.svelte-kit/build/runtime/app$1'
  ]
  },
  setupFilesAfterEnv: ['<rootDir>/jest-setup.ts'],
  collectCoverageFrom: ["src/**/*.{ts,tsx,svelte,js,jsx}"]
};

6.) inside package.json:
"scripts": {
  "test": "jest",
  "test:watch": "npm run test -- --watchAll",
  "test:coverage": "jest --coverage"
}

7.) then run:
npm run test

////////////////////////////////////////////
8.) Example test:
/**
 * @jest-environment jsdom
 */

import '@testing-library/jest-dom';
import RandomButton from '$lib/RandomButton.svelte';
import { render, fireEvent } from '@testing-library/svelte';

test('Button and Value are in the document', () => {
	const randomButton = render(RandomButton);

	const button = randomButton.getByRole('button');
	expect(button).toBeVisible();

	const textValue = randomButton.getByTestId('value');
	expect(textValue).toBeVisible();
});

test('Color value: red if < 0', () => {
	const randomButton = render(RandomButton, { value: -1 });

	const textValue = randomButton.getByTestId('value');
	expect(textValue).toHaveTextContent('-1');

	expect(textValue).toHaveStyle(`
    background-color: #ec4343;
    color: #f0f0f0;
    `);
});

test('Color value: green if > 0', () => {
	const randomButton = render(RandomButton, { value: 1 });

	const textValue = randomButton.getByTestId('value');
	expect(textValue).toHaveTextContent('1');

	expect(textValue).toHaveStyle(`
    background-color: #5fac5f;
    color: #f0f0f0;
    `);
});

test('Random value is hidden (value = default)', () => {
	const randomButton = render(RandomButton);
	const randomNumber = randomButton.getByTestId('random-value');
	expect(randomNumber).toBeInTheDocument();
	expect(randomNumber).not.toBeVisible();
	expect(randomNumber).toHaveTextContent('0');
});

test('Random value is hidden (value != default)', () => {
	const randomButton = render(RandomButton, { value: 100 });
	const randomNumber = randomButton.getByTestId('random-value');
	expect(randomNumber).toBeInTheDocument();
	expect(randomNumber).not.toBeVisible();
	expect(randomNumber).toHaveTextContent('0');
});

test('Button is blue', () => {
	const randomButton = render(RandomButton);
	const button = randomButton.getByRole('button');
	expect(button).toHaveClass('blue');
});

test('Random Number on click', async () => {
	const randomButton = render(RandomButton);
	const button = randomButton.getByRole('button');
	await fireEvent.click(button);

	const randomNumber = randomButton.getByTestId('random-value');
	expect(randomNumber).toBeInTheDocument();
	expect(randomNumber).not.toBeVisible();
	expect(randomNumber).not.toHaveTextContent('0');
});

test('Change Value on Click', async () => {
	const randomButton = render(RandomButton);
	const button = randomButton.getByRole('button');
	const valueOriginal = parseInt(randomButton.getByTestId('value').textContent);

	await fireEvent.click(button);

	const randomNumber = parseInt(randomButton.getByTestId('random-value').textContent);
	const valueResult = randomButton.getByTestId('value');

	const valueExpected = valueOriginal + randomNumber;

	expect(valueResult).toHaveTextContent(`${valueExpected}`);
});
////////////////////////////////////////////